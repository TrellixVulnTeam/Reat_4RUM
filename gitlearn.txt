
git config -l

git config --system --list

git config --global --list


git config --global user.name "aaa"
git config --global user.email aaa@gmail.com


1. git clone https://xxx@github.com/username/xx.git

2. To exit git log, type “q” or “z”.


3. git push origin --delete dev (remove remote branch)

4. git merge --no-ff -m "dev2" dev2 (merge branchgit)

5。git reset HEAD^ 或者 0faedae  重置以前版本。 用来盖这次的commit

6. git reset --hard HEAD^ 或者 0faedae  删除重设之后所有版本

回到将来

7. git reflog (找到要的commit id）在用  git reset --hard sdfd 找回来

回到过去单个文件

8. git checkout saf1fs -- q.py

重新来过

9. git revert HEAD^ 或者 0faedae   保留历史 重新来过


占时寄存

10. git stash  (占时寄存到一个空间的）

11. git stash pop  (取出来当时占存的工作）




start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
         git add 命令可将该文件添加到暂存区。

          添加一个或多个文件到暂存区：

          git add [file1] [file2] ...
          添加指定目录到暂存区，包括子目录：

          git add [dir]
          添加当前目录下的所有文件到暂存区：

          git add .
          https://www.runoob.com/git/git-add.html

   mv         Move or rename a file, a directory, or a symlink
          git mv 命令用于移动或重命名一个文件、目录或软连接。

          git mv [file] [newfile]
          如果新但文件名已经存在，但还是要重命名它，可以使用 -f 参数：

          git mv -f [file] [newfile]
          https://www.runoob.com/git/git-mv.html

   reset      Reset current HEAD to the specified state
          git reset 命令语法格式如下：

          git reset [--soft | --mixed | --hard] [HEAD]
          --mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。

          git reset  [HEAD]
          实例：

          $ git reset HEAD^            # 回退所有内容到上一个版本
          $ git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一个版本
          $ git  reset  052e           # 回退到指定版本
          https://www.runoob.com/git/git-reset.html


   rm         Remove files from the working tree and from the index

          实例
          删除 hello.php 文件：

          $ git rm hello.php
          rm 'hello.php'
          $ ls
          README
          文件从暂存区域移除，但工作区保留：

          $ git rm --cached README
          rm 'README'
          $ ls
          README
          可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：

          git rm –r *
          进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。
          https://www.runoob.com/git/git-rm.html


examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
         $ git log
         我们可以用 --oneline 选项来查看历史记录的简洁的版本。
         $ git log --oneline
         我们还可以用 --graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：
         $ git log --graph
         你也可以用 --reverse 参数来逆向显示所有日志。
         $ git log --reverse --oneline
         如果只想查找指定用户的提交日志可以使用命令：git log --author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：
         $ git log --author=Linus --oneline -5
         如果你要指定日期，可以执行几个选项：--since 和 --before，但是你也可以用 --until 和 --after。
         例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）：
         $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges
         如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：
         git blame <file>
         https://www.runoob.com/git/git-commit-history.html#git-blame



   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
        创建分支命令：
        git branch (branchname)
        列出分支基本命令：
        git branch -a
        https://www.runoob.com/git/git-branch.html
        删除分支命令：
        git branch -d (branchname)
        我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作


   checkout   Switch branches or restore working tree files
         切换分支命令:
         git checkout (branchname)
         我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作
         https://www.runoob.com/git/git-branch.html

   commit     Record changes to the repository
         $ git commit -am '修改 hello.php 文件'
         [master 71ee2cb] 修改 hello.php 文件
         1 file changed, 1 insertion(+)
         https://www.runoob.com/git/git-commit.html

   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
          当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。

          合并分支命令:

          git merge (other branch name)
          git merge newtest
          准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：

          $ git merge --no-ff -m "merge with no-ff" dev
          https://www.runoob.com/git/git-branch.html


   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects
          以下命令将本地的 master 分支推送到 origin 主机的 master 分支。

          $ git push origin master
          相等于：

          $ git push origin master:master
          如果本地版本与远程版本有差异，但又要强制推送可以使用 --force 参数：

          git push --force origin master
          删除主机但分支可以使用 --delete 参数，以下命令表示删除 origin 主机的 master 分支：

          git push origin --delete master
          https://www.runoob.com/git/git-push.html
